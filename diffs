diff --git a/plotOutput.py b/plotOutput.py
index b1e35b6..1b4e868 100644
--- a/plotOutput.py
+++ b/plotOutput.py
@@ -211,7 +211,6 @@ def plotCRecon(data, params):
     from mpl_toolkits.mplot3d import Axes3D
     n = params['n']
     nData = data.shape[0]/(2*n)
-    print nData
     fig = plt.figure()
     ax1 = fig.add_subplot(211, projection='3d')
     ax2 = fig.add_subplot(212, projection='3d')
@@ -224,6 +223,7 @@ def plotCRecon(data, params):
     ax2.set_ylim(bottom=0, top=n)
     ax2.set_zlim(bottom=0, top=maxDeg)
     newFolder = makeFolder('CRecon')
+    print '--> saving', nData, 'images in', newFolder
     fileName = ''
     for i in range(nData):
         preRecon = data[n*2*i:n*(2*i+1),:]
@@ -245,6 +245,54 @@ def plotCRecon(data, params):
         ax2.set_zlim3d(bottom=0, top=maxDeg)
     makeAnimation(fileName, newFolder)
 
+def compare_recon(data_list, params):
+    import matplotlib.cm as cm
+    import matplotlib.colors as colors
+    n = params['n']
+    ndata = len(data_list)
+    print ndata
+    npts = (data_list[0]).shape[0]/(2*n)
+    err = np.empty(npts)
+    max_err = np.empty(npts)
+    avg_err = np.empty(npts)
+    # avg the data, then plot
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    colornorm = colors.Normalize(vmin=0, vmax=npts-1)
+    colormap = cm.ScalarMappable(norm=colornorm, cmap='jet')
+    for i in range(npts):
+        preRecon = np.zeros((n,n))
+        postRecon = np.zeros((n,n))
+        for k in range(ndata):
+            preRecon = preRecon + data_list[k][n*2*i:n*(2*i+1),:]
+            postRecon = postRecon + data_list[k][n*(2*i+1):n*(2*i+2),:]
+        preRecon = preRecon / float(ndata)
+        postRecon = postRecon / float(ndata)
+        pre_recon_degs = np.sum(preRecon, 0)
+        post_recon_degs = np.sum(postRecon, 0)
+        ax.scatter(range(n), pre_recon_degs - (post_recon_degs, lw=0, c=colormap.to_rgba(float(i)), alpha=0.3)
+        pre_sort = np.argsort(pre_recon_degs)
+        post_sort = np.argsort(post_recon_degs)
+        preRecon = preRecon[pre_sort, :]
+        preRecon = preRecon[:, pre_sort]
+        postRecon = postRecon[post_sort, :]
+        postRecon = postRecon[:, post_sort]
+        err[i] = np.linalg.norm(preRecon - postRecon)
+        max_err[i] = np.max(preRecon - postRecon)
+        avg_err[i] = np.average(preRecon - postRecon)
+    plt.show()
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    ax.plot(range(npts), err, c='c', label='cumulative')
+    ax.plot(range(npts), avg_err, c='g', label='average')
+    ax.plot(range(npts), max_err, c='r', label='maximum single-degree')
+    ax.set_ylim(bottom=0)
+    ax.set_xlabel('approximate time')
+    ax.set_ylabel('reconstruction error')
+    print '--> saving images in recon_comp'
+    plt.savefig('./recon_comp/recon_comp.png')
+    
+
 def plotEigVectRecon(data, params):
     n = params['n']
     nData = data.shape[0]/(2)
@@ -453,11 +501,10 @@ def plot_vectors_tc(data, params):
     """
     nvects = data.shape[1]
     nyvects = nvects - 1
-    print data.shape
     fig = plt.figure()
     ax = fig.add_subplot(111)
     ax.hold(False)
-    for i in range(nyvects-1):
+    for i in range(nyvects):
         ax.scatter(data[:,nyvects], data[:,i], color=(np.sin(i/nyvects), np.cos(1-i/nyvects), 1-i/nyvects), label="coeff: " + str(i+1), lw=0)
         ax.set_xlabel('simulation step')
         ax.set_ylabel('coefficient value')
@@ -1163,6 +1210,11 @@ if __name__=="__main__":
     parser.add_argument('--plot-selfloop-densities', '--plot-sld', action='store_true', default=False)
     parser.add_argument('--plot-degrees-analytic', '-pda', action='store_true', default=False)
     args = parser.parse_args()
+    # this whole file is a huge piece of
+    # the atrocities below won't be noticed
+    data_list = []
+    params = None
+    comp = False
     if args.compare_projection:
         # must have args.inputFiles.size === 2
         fullFile = ''
@@ -1245,9 +1297,15 @@ if __name__=="__main__":
                 fns.append(lambda x,y: x + y)
                 plotFittedData(data, params, fns)
             if 'projData' in fileName:
-                plotCRecon(data, params)
+                data_list.append(data)
+                comp = True
             # if 'eigVectData' in fileName:
                 # plotEigVectRecon(data, params)
+<<<<<<< HEAD
+    if comp:
+        compare_recon(data_list, params)
+=======
             if args.plot_degrees_analytic:
                 degs, params = get_data(fileName, header_rows=1)
                 plot_degrees(degs[-1,:])
+>>>>>>> nocpi
diff --git a/report/analytical_simulation_comp.pdf b/report/analytical_simulation_comp.pdf
deleted file mode 100644
index 0e6d5be..0000000
Binary files a/report/analytical_simulation_comp.pdf and /dev/null differ
diff --git a/report/analytical_simulation_comp.tex b/report/analytical_simulation_comp.tex
deleted file mode 100644
index 3acef26..0000000
--- a/report/analytical_simulation_comp.tex
+++ /dev/null
@@ -1,45 +0,0 @@
-\documentclass[11pt]{article}
-\usepackage{graphicx, subcaption}
-\usepackage[top=0.25in, bottom=0.25in, left=1in, right=1in]{geometry}
-\graphicspath{ {./figs/} }
-\pagestyle{plain}
-\let\endchangemargin=\endlist 
-\begin{document}
-\title{\vspace{-20mm}Comparison of analytical results with simulations}
-\author{}
-\date{}
-\maketitle
-
-\centering
-\begin{figure}[h!]
-  \vspace{-15mm}
-  \includegraphics[height=100mm]{n_500_k_1_deg_step_2n3}
-  \caption{Evolution of degrees from direct simulation, $n=500 \; \kappa=1 \; \rho=2$, axis scale is $10^8$.}
-\end{figure}
-
-
-\centering
-\begin{figure}[h!]
-  \vspace{-5mm}
-  \includegraphics[height=100mm]{n_500_fullsimulation_analytical_2n3ish}
-  \caption{Evolution of degrees from analytical C.I.R. equation $n=500 \; \kappa=1 \; \rho=2$, 500 trajectories are shown}
-\end{figure}
-
-\clearpage
-
-\centering
-\begin{figure}[h!]
-  \includegraphics[height=100mm]{n_500_simulation_analytical_samples_50_2}
-  \caption{Difference in equilibrium degree distribution, $n=500 \; \kappa=1 \; \rho=2$, axis scale is $10^9$. To obtain an approximation of the analytical distribution, the poisson distribution, (36) in \cite{Rath2012}, was sampled to create an $n \; \times n$ adjacency matrix $A_i$. The degrees distribution $deg(A_i)$ was then calculated. This process was repeated fifty times, and the sorted degree distributions, $deg(A_i) \; i=1,2,...,50$ were averaged to obtain one final, average, steady state distribution. These sorted, analytically-based degrees were then subtracted from the sorted degrees arising from the simulation. Taking this difference at each time-step results in the above figure.}
-\end{figure}
-
-\centering
-\begin{figure}[h!]
-  \includegraphics[height=100mm]{n_500_simulation_analytical_samples_50_fullrange}
-  \caption{Difference in equilibrium degree distribution over entire simulation, $n=500 \; \kappa=1 \; \rho=2$, axis scale is $10^9$.}
-\end{figure}
-\vspace{20mm}
-\bibliographystyle{abbrv}
-\bibliography{$HOME/Documents/bibTex/library}
-
-\end{document}
diff --git a/report/balazs_briefing_figs.tex b/report/balazs_briefing_figs.tex
deleted file mode 100644
index 5ef3e4b..0000000
--- a/report/balazs_briefing_figs.tex
+++ /dev/null
@@ -1,129 +0,0 @@
-\centering
-\begin{figure}[h!]
-  \vspace{-30mm}
-  \begin{subfigure}{0.5\textwidth}
-    \includegraphics[height=60mm]{n_500_n3_3d_v2}
-    \caption{$n^{3}$ timescale}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \begin{subfigure}{0.5\textwidth}
-    \includegraphics[height=60mm]{n_500_2n3_3d_v2}
-    \caption{$n^{2}$ timescale}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \caption{Evolution of degrees. ($n=500$, $m=250000$)}
-  \label{fig:n500_3d}
-\end{figure}
-
-\begin{figure}[h!]
-  \vspace{-5mm}
-  \centering
-  \begin{subfigure}{0.5\textwidth}
-    \centering
-    \includegraphics[height=50mm]{n_500_n3_deg_percentile}
-    \caption{$n^{3}$ timescale}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \begin{subfigure}{0.5\textwidth}
-    \centering
-    \includegraphics[height=50mm]{n_500_2n3_deg_percentile}
-    \caption{$n^{2}$ timescale}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \caption{Evolution of degrees and percentiles, a projection of Fig. \ref{fig:n500_3d} along the time axis. ($n=500$, $m=250000$)}
-\end{figure}
-
-\begin{figure}[h!]
-  \vspace{-5mm}
-  \centering
-  \begin{subfigure}{0.5\textwidth}
-    \centering
-    \includegraphics[height=60mm]{n_500_n3_degchange_percentile}
-    \caption{$n^{3}$ timescale}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \begin{subfigure}{0.5\textwidth}
-    \centering
-    \includegraphics[height=60mm]{n_500_2n3_degchange_percentile}
-    \caption{$n^{2}$ timescale}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \caption{Change in degree distribution between each step plotted against percentiles. ($n=500$, $m=250000$)}
-\end{figure}
-
-\begin{figure}[h!]
-  \vspace{-5mm}
-  \begin{subfigure}{0.5\textwidth}
-    \includegraphics[height=50mm]{n_500_n3_deg_step}
-    \caption{$n^{3}$ timescale}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \begin{subfigure}{0.5\textwidth}
-    \includegraphics[height=50mm]{n_500_2n3_deg_step}
-    \caption{$n^{2}$ timescale}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \caption{Evolution of degree distribution. Color indicates percentile, i.e. the median degree at each step is colored green. ($n=500$, $m=250000$)}
-\end{figure}
-
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_500_short}
-%%   \caption{$n^{2}$ timescale, $n=500$, $m=250000$}
-%%   \label{fig:500sv}
-%% \end{figure}
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_500_long_3d}
-%%   \caption{$n^{3}$ timescale, $n=500$, $m=250000$}
-%%   \label{fig:500l3}
-%% \end{figure}
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_500_long_time}
-%%   \caption{$n^{3}$ timescale, $n=500$, $m=250000$}
-%%   \label{fig:500lt}
-%% \end{figure}
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_500_long}
-%%   \caption{$n^{3}$ timescale, $n=500$, $m=250000$}
-%%   \label{fig:500lv}
-%% \end{figure}
-
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_1000_short_3d}
-%%   \caption{$n^{2}$ timescale, $n=1000$, $m=1000000$}
-%%   \label{fig:1000s3}
-%% \end{figure}
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_1000_short_time}
-%%   \caption{$n^{2}$ timescale, $n=1000$, $m=1000000$}
-%%   \label{fig:1000st}
-%% \end{figure}
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_1000_short}
-%%   \caption{$n^{2}$ timescale, $n=1000$, $m=1000000$}
-%%   \label{fig:1000sv}
-%% \end{figure}
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_1000_long_3d}
-%%   \caption{$n^{3}$ timescale, $n=1000$, $m=1000000$}
-%%   \label{fig:1000l3}
-%% \end{figure}
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_1000_long_time}
-%%   \caption{$n^{3}$ timescale, $n=1000$, $m=1000000$}
-%%   \label{fig:1000lt}
-%% \end{figure}
-%% \begin{figure}[h!]
-%%   \centering
-%%   \includegraphics[height=60mm]{n_1000_long}
-%%   \caption{$n^{3}$ timescale, $n=1000$, $m=1000000$}
-%%   \label{fig:1000lv}
-%% \end{figure}
diff --git a/report/balazs_briefing_intro.pdf b/report/balazs_briefing_intro.pdf
deleted file mode 100644
index 6bbcda6..0000000
Binary files a/report/balazs_briefing_intro.pdf and /dev/null differ
diff --git a/report/balazs_suggestions_1.pdf b/report/balazs_suggestions_1.pdf
deleted file mode 100644
index 3a5015d..0000000
Binary files a/report/balazs_suggestions_1.pdf and /dev/null differ
diff --git a/report/balazs_suggestions_1.tex b/report/balazs_suggestions_1.tex
deleted file mode 100644
index 147aecf..0000000
--- a/report/balazs_suggestions_1.tex
+++ /dev/null
@@ -1,82 +0,0 @@
-\documentclass[11pt]{article}
-\usepackage{graphicx, subcaption}
-\usepackage[top=1in, bottom=1in, left=1in, right=1in]{geometry}
-\graphicspath{ {./figs/} }
-\pagestyle{plain}
-\def\changemargin#1#2{\list{}{\rightmargin#2\leftmargin#1}\item[]}
-\let\endchangemargin=\endlist 
-\begin{document}
-\title{\vspace{-5mm}Comparison of $\kappa=1$ and $\kappa=0.5$}
-\author{Alexander Holiday}
-\date{}
-\maketitle
-\vspace{3cm}
-\begin{changemargin}{0.0cm}{0.0cm}
-\begin{figure}[h!]
-  \vspace{-30mm}
-  \begin{subfigure}{0.5\textwidth}
-    \includegraphics[height=60mm]{n_500_2n3_3d_v2}
-    \caption{$\kappa=0.5$}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \begin{subfigure}{0.5\textwidth}
-    \includegraphics[height=60mm]{n_500_k_1_3d_2n3}
-    \caption{$\kappa=1$}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \caption{Evolution of degrees. ($n=500$, $m=250000$)}
-  \label{fig:n500_3d}
-\end{figure}
-
-\begin{figure}[h!]
-  \vspace{-5mm}
-  \centering
-  \begin{subfigure}{0.5\textwidth}
-    \centering
-    \includegraphics[height=60mm]{n_500_2n3_deg_percentile}
-    \caption{$\kappa=0.5$}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \begin{subfigure}{0.5\textwidth}
-    \centering
-    \includegraphics[height=60mm]{n_500_k_1_deg_perc_2n3}
-    \caption{$\kappa=1$}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \caption{Evolution of degrees and percentiles, a projection of Fig. \ref{fig:n500_3d} along the time axis. ($n=500$, $m=250000$)}
-\end{figure}
-
-\begin{figure}[h!]
-  \vspace{-5mm}
-  \centering
-  \begin{subfigure}{0.5\textwidth}
-    \centering
-    \includegraphics[height=60mm]{n_500_2n3_degchange_percentile}
-    \caption{$\kappa=0.5$}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \begin{subfigure}{0.5\textwidth}
-    \centering
-    \includegraphics[height=60mm]{n_500_k_1_degchange_perc_2n3}
-    \caption{$\kappa=1$}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \caption{Change in degree distribution between each step plotted against percentiles. ($n=500$, $m=250000$)}
-\end{figure}
-
-\begin{figure}[h!]
-  \vspace{-5mm}
-  \begin{subfigure}{0.5\textwidth}
-    \includegraphics[height=50mm]{n_500_2n3_deg_step}
-    \caption{$\kappa=0.5$}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \begin{subfigure}{0.5\textwidth}
-    \includegraphics[height=50mm]{n_500_k_1_deg_step_2n3}
-    \caption{$\kappa=1$}
-    \label{fig:100s3}
-  \end{subfigure}%
-  \caption{Evolution of degree distribution. Color indicates percentile, e.g. the median degree at each step is colored green. ($n=500$, $m=250000$)}
-\end{figure}
-\end{changemargin}
-\end{document}
diff --git a/report/yannis_temp.tex b/report/yannis_temp.tex
deleted file mode 100644
index f7bb23a..0000000
--- a/report/yannis_temp.tex
+++ /dev/null
@@ -1,45 +0,0 @@
-\documentclass[11pt]{article}
-\usepackage{graphicx, subcaption}
-\usepackage[top=0.25in, bottom=0.25in, left=1in, right=1in]{geometry}
-\graphicspath{ {./figs/} }
-\pagestyle{plain}
-\let\endchangemargin=\endlist 
-\begin{document}
-\title{\vspace{-20mm}New initialization results}
-\author{}
-\date{}
-\maketitle
-
-\centering
-\begin{figure}[h!]
-  \vspace{-15mm}
-  \includegraphics[height=100mm]{simple_edge_density}
-\end{figure}
-
-\begin{figure}[h!]
-  \vspace{-15mm}
-  \includegraphics[height=100mm]{selfloop_time}
-\end{figure}
-
-
-
-\centering
-\begin{figure}[h!]
-  \includegraphics[height=100mm]{deg_step_n2}
-\end{figure}
-
-\clearpage
-
-\centering
-\begin{figure}[h!]
-  \vspace{-5mm}
-  \includegraphics[height=100mm]{deg_step_n3_full}
-\end{figure}
-
-\centering
-\begin{figure}[h!]
-  \vspace{-5mm}
-  \includegraphics[height=100mm]{deg_step_n3_truncated}
-\end{figure}
-
-\end{document}
diff --git a/stochastic_integral.py b/stochastic_integral.py
deleted file mode 100644
index bc8c5c5..0000000
--- a/stochastic_integral.py
+++ /dev/null
@@ -1,162 +0,0 @@
-import numpy as np
-import matplotlib.pyplot as plt
-import sys
-import time
-
-from mpltools import style
-from mpltools import layout
-
-style.use('ggplot')
-
-# integrate the SDE
-# dX = h*X*dt + mu*X*dW
-# using various stochastic integration schemes
-
-def euler_maruyama(f, g, T, steps, W=None, X0=1, weak=False):
-    # set up W and check for dimension agreement
-    if W is not None and steps+1 != W.shape[0]:
-        print 'input W not of appropriate length'
-        exit()
-    dt = 1.0*T/steps
-    if W is None:
-        if weak:
-            W = np.power(dt, 0.5)*(2*np.random.randint(low=0, high=2, size=steps+1) - 1)
-            print 'weak rw data generated'
-        else:
-            W = gen_rw(T, dt)[1]
-    # run alg
-    Xs = np.zeros(steps+1)
-    Xs[0] = X0
-    for i in range(1, steps+1):
-        Xs[i] = Xs[i-1] + f(Xs[i-1])*dt + g(Xs[i-1])*(W[i]-W[i-1])
-    # return [times, vals]
-    return np.array([dt*np.array(range(steps+1)), Xs])
-
-def milstein(f, g, g1, T, steps, W=None, X0=1):
-    # set up W and check for dimension agreement
-    if W is not None and steps+1 != W.shape[0]:
-        print 'input W not of appropriate length'
-        exit()
-    dt = 1.0*T/steps
-    if W is None:
-        W = gen_rw(T, dt)[1]
-    # run alg
-    Xs = np.zeros(steps+1)
-    Xs[0] = X0
-    for i in range(1, steps+1):
-        Xs[i] = Xs[i-1] + f(Xs[i-1])*dt + g(Xs[i-1])*(W[i]-W[i-1]) + g(Xs[i-1])*g1(Xs[i-1])*(np.power(W[i]-W[i-1], 2) - dt)/2.0
-    # return [times, vals]
-    return np.array([dt*np.array(range(steps+1)), Xs])
-    
-
-def gen_rw(T=100, dt=0.01):
-    steps = int(T/dt)
-    step_var = np.power(dt, 0.5)
-    moves = step_var*np.random.normal(size=steps+1)
-    locs = np.zeros(steps+1)
-    locs[0] = 0
-    locs[1] = moves[1]
-    for i in range(2, steps+1):
-        locs[i] = locs[i-1] + moves[i]
-    # return array of [locations, times]
-    return np.array([dt*np.array(range(0, steps+1)), locs])
-
-def test_colors():
-    fig = plt.figure()
-    ax = fig.add_subplot(111)
-    index = 0
-    for c in plt.rcParams['axes.color_cycle']:
-        ax.scatter(index, index, c=c, s=160, lw=0)
-        index = index + 1
-    plt.show(fig)
-
-def plot_trajs(times, trajs):
-    # expects trajs to have shape (ntrajs, nsteps)
-    import matplotlib.cm as cm
-    import matplotlib.colors as colors
-    import matplotlib.colorbar as colorbar
-    import matplotlib.gridspec as gs
-    FONTSIZE = 48
-    TICKSIZE = 36
-    gspec = gs.GridSpec(6,6)
-    fig = plt.figure()
-    ax = fig.add_subplot(gspec[:6,:5])
-    nsteps = times.shape[0]
-    ntrajs = trajs.shape[0]
-    # plot each step individually, coloring by y-value
-    indices = np.array(range(ntrajs))
-    for i in range(nsteps):
-        ax.scatter(np.ones(ntraj)*times[i], np.sort(n*trajs[:,i]), c=indices, cmap='jet', lw=0, s=12, alpha=0.7)
-    ax.set_xlim((times[0], times[-1]))
-    ax.set_ylim((0, int(n*1.05*np.max(trajs))))
-    ax.set_xlabel('t', fontsize=FONTSIZE)
-    ax.set_ylabel('degree (from CIR SDE)', fontsize=FONTSIZE)
-    # assume ymajorticklabels is not empty
-    txtcolor = ax.get_ymajorticklabels()[0].get_color()
-    ax.set_title(r'$\kappa = $' + str(kappa) + ', ' + r'$\rho = $' + str(rho), fontsize=FONTSIZE, color=txtcolor)
-    ax.tick_params(axis='both', which='major', labelsize=TICKSIZE)
-    ax.tick_params(axis='both', which='minor', labelsize=TICKSIZE)
-    greyval = '0.96'
-    ax.set_axis_bgcolor(greyval)
-    # set up colorbar
-    ax_cb = fig.add_subplot(gspec[:,5])
-    colorbarnorm = colors.Normalize(vmin=0, vmax=100)
-    cb = colorbar.ColorbarBase(ax_cb, cmap='jet', norm=colorbarnorm, orientation='vertical')
-    ax_cb.tick_params(axis='both', which='major', labelsize=TICKSIZE)
-    ax_cb.tick_params(axis='both', which='minor', labelsize=TICKSIZE)
-    fig.text(0.78, 0.93, 'percentile', fontsize=FONTSIZE-4, color=txtcolor)
-    plt.show()
-    
-def progress_bar(current, total, elapsed_time=None):
-    perc = int((100.0*current)/total)
-    percf = (100.0*current)/total
-    bar = '\r['
-    for i in range(perc):
-        bar = bar + '|'
-    for i in range(100-perc):
-        bar = bar + ' '
-    bar = bar + '] '
-    if elapsed_time is not None:
-        bar = bar + str(int(elapsed_time/(percf/100.0)) - int(elapsed_time)) + 's remaining'
-    print bar,
-    sys.stdout.flush()
-
-if __name__=='__main__':
-    # test_colors()
-    import argparse
-    parser = argparse.ArgumentParser()
-    parser.add_argument('--kappa', '-k', nargs=1, type=float, default=[1.0])
-    parser.add_argument('--rho', '-r', nargs=1, type=float, default=[2.0])
-    parser.add_argument('--n', '-n', nargs=1, type=int, default=[500])
-    args = parser.parse_args()
-    kappa = args.kappa[0]
-    rho = args.rho[0]
-    n = args.n[0]
-    f = lambda x: kappa*(1 - x/rho)
-    g = lambda x: np.power(2*x, 0.5)
-    g1 = lambda x: np.power(2*x, -0.5)
-    T = 1
-    steps = np.power(2, 9)
-    dt = 1.0*T/steps
-    ntraj = n
-    Xtrajs = np.zeros((ntraj, steps+1))
-    start = time.clock()
-    for i in range(ntraj):
-        W=gen_rw(T, dt)[1]
-        times, Xtrajs[i,:] = milstein(f, g, g1, T, steps, W=W, X0=2)
-        progress_bar(i+1, ntraj, time.clock() - start)
-    plot_trajs(times, Xtrajs)
-    # ax.plot(times, XsM, c=c)
-    # c1 = plt.rcParams['axes.color_cycle'][5]
-    # c2 = plt.rcParams['axes.color_cycle'][4]
-    # c3 = plt.rcParams['axes.color_cycle'][1]
-    # c4 = plt.rcParams['axes.color_cycle'][0]
-    # # ax.scatter(times, XsEM, c=c1, lw=0, s=12, alpha=0.7, label='em')
-    # # ax.plot(times, XsEM, c=c1)
-    # ax.scatter(times, XsM, c=c3, lw=0, s=12, alpha=0.7, label='m')
-    # ax.plot(times, XsM, c=c3)
-    # # ax.scatter(times, np.exp((kappa - np.power(mu, 2)/2)*times + mu*W), c=c2, lw=0, s=12, alpha=0.7, label='analytical')
-    # # ax.plot(times, np.exp((kappa - np.power(mu, 2)/2)*times + mu*W), c=c2)
-    # ax.grid(b=None)
-    # ax.legend()
-    # plt.show(fig)
